
(*******************************************************************************
 * 
 *
 * Generate C++ code for calculation of Soft Function matrices
 *
 * If withcI is set to "true", also imaginary part is written to .cc files. This
 * is meant to be used for sanity checks (results should not depend on the value
 * of cI as Tr[HS] is real by construction). If no checks are planned, it is
 * better to set this variable to "false" as then the output files are shorter,
 * hence they compile faster.
 *
 *
 ******************************************************************************)
withcI = "false";

BeginPackage["GenerateCppCodeSoftFunction`", {"Symbols`"}];


Begin["`Private`"];

(* The LO and NLO soft functions are taken from Li et al. (after correcting
   their bugs). At each order, they are split according to the Lp power.
*)

mypath = Directory[] <> "/program-prd88"; 
Get[ mypath <> "/setting_sigma.m"];
Get["SoftFunction`"];
Get["Replacements`"];


(* S_qq LO, NLO 
 *
 * Here, we have to use the soft function of Li et al. as our NLO result from
 * SoftFunction.m contains only the RGE part.
 *
 *) 
softqq00 = softqq[0];

softqq11 = Coefficient[softqq[1]//.ReplNotation, Lp, 1];
softqq10 = Coefficient[softqq[1]//.ReplNotation, Lp, 0];

(* S_qq NNLO 
 *
 * This is our result obtained from RGE.
 *
 *) 
softqq2Mine = softqq2//. ReplNumbers//. ReplNotation//. ReplLogsu1t1 // Simplify;
softqq22 = Coefficient[softqq2Mine, Lp, 2] //. ReplNotation;
softqq21 = Coefficient[softqq2Mine, Lp, 1] //. ReplNotation;

(* S_gg LO, NLO
 *
 * Here, we have to use the soft function of Li et al. as our NLO result from
 * SoftFunction.m contains only the RGE part.
 *
*) 
softgg00 = softgg[0];

softgg11 = Coefficient[softgg[1]//.ReplNotation, Lp, 1];
softgg10 = Coefficient[softgg[1]//.ReplNotation, Lp, 0];

(* S_gg NNLO 
 *
 * This is our result obtained from RGE.
 *
 *) 
softgg2Mine = softgg2//. ReplNumbers//. ReplNotation//. ReplLogsu1t1 // Simplify;
softgg22 = Coefficient[softgg2Mine, Lp, 2] //. ReplNotation;
softgg21 = Coefficient[softgg2Mine, Lp, 1] //. ReplNotation;


(******************************************************************************
 *
 * Add particular soft function contribution to the .hh and .cc files
 * 
 *****************************************************************************)
AddFunction[name_, size_, filehh_, filecc_, withci_] := Module[{str,SFexpr},

  If[withci === "true",
     SFexpr = ToExpression[name],
     SFexpr = ToExpression[name]/.cI->0;
  ];
  
  str = "void " <> name <> " (double M, double theta, double mt, "<>
        "double softmatrix["<>ToString[size]<>"]["<>ToString[size]<>"])";
  WriteString[filehh, str<>"; \n\n"];
  WriteString[filecc, str<>" {\n\n"];

  If[!FreeQ[SFexpr, beta],
    WriteString[filecc, 
      "  double beta = sqrt(1 - 4*pow(mt,2)/pow(M,2));\n"]];
  If[!FreeQ[SFexpr, xs],
    WriteString[filecc, 
      "  double xs = (1 - beta)/(1 + beta);\n"]];
  If[!FreeQ[SFexpr, t1],
    WriteString[filecc, 
      "  double t1 = -((1 - beta*cos(theta))/sqrt(1 - pow(beta,2)))*mt*M;\n"]];
  If[!FreeQ[SFexpr, u1],
    WriteString[filecc, 
      "  double u1 = -((1 + beta*cos(theta))/sqrt(1 - pow(beta,2)))*mt*M;\n"<>
      "\n"]];

  Do[
    WriteString[filecc, 
      "  softmatrix["<>ToString[i-1]<>"]["<>ToString[j-1]<>"] =\n"<>
      "    " <>
      ToString[CForm[SFexpr[[i,j]]]]<>";\n"];
    , {i, 1, size}, {j, 1, size}
  ];

  WriteString[filecc, 
    "\n"<>
    "};\n"];

]

(******************************************************************************
 *
 * Open and fill the begining of .hh and .cc files
 * 
 *****************************************************************************)
StartFilehh[] := Module[{fstream, datetime = DateString[DateList[]]},
  fstream = OpenWrite["../topqT++limited/soft.hh"];

  WriteString[fstream, "// Generated by GenerateCppCodeSoftFunction.m " ];
  WriteString[fstream, "on " <> datetime <> "\n\n"];
  WriteString[fstream,
    "#ifndef __SOFT_H_\n"<>
    "#define __SOFT_H__\n\n"<>
    "#include <heplib/MathematicaC.hh>\n"<>
    "#include \"common.hh\"\n\n"
  ];

  Return[fstream]; 
];

StartFilecc[] := Module[{fstream, datetime = DateString[DateList[]]},
  fstream = OpenWrite["../topqT++limited/soft.cc"];

  WriteString[fstream, "// Generated by GenerateCppCodeSoftFunction.m " ];
  WriteString[fstream, "on " <> datetime <> "\n\n"];
  WriteString[fstream, "#include \"soft.hh\"\n\n" ];

  Return[fstream]; 
];


(******************************************************************************
 *
 * Write final lines and close .hh and .cc files
 *
 *****************************************************************************)
CloseFilehh[fstream_] := Module[{},
  WriteString[fstream, "#endif/*__SOFT_H__*/\n"];
  Close[fhh];
];

(******************************************************************************
 *
 * Fill .hh and .cc files with content
 * 
 *****************************************************************************)
fhh = StartFilehh[];
fcc = StartFilecc[];

AddFunction["softqq00", 2, fhh, fcc, withcI];
AddFunction["softqq11", 2, fhh, fcc, withcI];
AddFunction["softqq10", 2, fhh, fcc, withcI];
AddFunction["softqq22", 2, fhh, fcc, withcI];
AddFunction["softqq21", 2, fhh, fcc, withcI];

AddFunction["softgg00", 3, fhh, fcc, withcI];
AddFunction["softgg11", 3, fhh, fcc, withcI];
AddFunction["softgg10", 3, fhh, fcc, withcI];
AddFunction["softgg22", 3, fhh, fcc, withcI];
AddFunction["softgg21", 3, fhh, fcc, withcI];

CloseFilehh[fhh];
Close[fcc];

End[];
EndPackage[];
